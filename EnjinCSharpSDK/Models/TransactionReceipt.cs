using System.Collections.Generic;
using JetBrains.Annotations;
using Newtonsoft.Json;

namespace Enjin.SDK.Models
{
    /// <summary>
    /// Models a receipt for a blockchain transaction.
    /// </summary>
    [PublicAPI]
    public class TransactionReceipt
    {
        /// <summary>
        /// Represents the hash of the block where the transaction is.
        /// </summary>
        /// <value>The block hash.</value>
        [JsonProperty("blockHash")]
        public string? BlockHash { get; private set; }
        
        /// <summary>
        /// Represents the block number where the transaction is.
        /// </summary>
        /// <value>The block number.</value>
        [JsonProperty("blockNumber")]
        public int? BlockNumber { get; private set; }
        
        /// <summary>
        /// Represents the total amount of gas used when the transaction was executed in the block.
        /// </summary>
        /// <value>The total gas used.</value>
        [JsonProperty("cumulativeGasUsed")]
        public int? CumulativeGasUsed { get; private set; }
        
        /// <summary>
        /// Represents the gas used by the specific transaction alone.
        /// </summary>
        /// <value>The gas used.</value>
        [JsonProperty("gasUsed")]
        public int? GasUsed { get; private set; }
        
        /// <summary>
        /// Represents the sender address.
        /// </summary>
        /// <value>The sender address.</value>
        [JsonProperty("from")]
        public string? From { get; private set; }
        
        /// <summary>
        /// Represents the receiver address, or <c>null</c> when the transaction is for contract creation.
        /// </summary>
        /// <value>The receiver address.</value>
        [JsonProperty("to")]
        public string? To { get; private set; }
        
        /// <summary>
        /// Represents the hash of the transaction.
        /// </summary>
        /// <value>The transaction hash.</value>
        [JsonProperty("transactionHash")]
        public string? TransactionHash { get; private set; }
        
        /// <summary>
        /// Represents the transaction index position in the block.
        /// </summary>
        /// <value>The transaction index.</value>
        [JsonProperty("transactionIndex")]
        public int? TransactionIndex { get; private set; }
        
        /// <summary>
        /// Represents the status of the transaction.
        /// </summary>
        /// <value>The status.</value>
        [JsonProperty("status")]
        public bool? Status { get; private set; }
        
        /// <summary>
        /// Represents the list of log objects generated by the transaction.
        /// </summary>
        /// <value>The list of logs.</value>
        [JsonProperty("logs")]
        public List<TransactionLog>? Logs { get; private set; }
    }
}